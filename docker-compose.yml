services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: streamix
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Web application (Next.js)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/streamix}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-http://localhost:8080}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification worker
  notify-worker:
    build:
      context: .
      dockerfile: apps/notify-worker/Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/streamix}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CLOUDFRONT_DOMAIN=${CLOUDFRONT_DOMAIN:-your-cloudfront-domain.cloudfront.net}
      - PRISMA_CLI_BINARY_TARGETS=${PRISMA_CLI_BINARY_TARGETS:-linux-arm64-openssl-3.0.x}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Worker is running')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket notification server
  notify-wss:
    build:
      context: .
      dockerfile: apps/notify-wss/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - PORT=${PORT:-8080}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/ping', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
